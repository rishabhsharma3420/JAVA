package heap;

import java.util.ArrayList;

public class Heap {
	private ArrayList<Integer> data = new ArrayList<>();
	private boolean ismin;

	public Heap(boolean ismin) {
		this.ismin = ismin;
	}

	public int size() {
		return data.size();
	}

	public boolean isEmpty() {
		return data.isEmpty();
	}

	public void display() {
		System.out.println(data);
	}

	public void add(int value) {
		data.add(value);
		upheapify(data.size() - 1);
	}

	private void upheapify(int ci) {
		int pi = (ci - 1) / 2;
		if (higherP(ci, pi)) {
			swap(ci, pi);
			upheapify(pi);
		}
		return;
	}

	public int remove() {
		int a = data.get(0);
		swap(0, data.size() - 1);
		data.remove(data.size() - 1);
		downheapify(0);
		return a;
	}

	private void downheapify(int pi) {
		int lci = 2 * pi + 1;
		int rci = 2 * pi + 2;
		int max = pi;
		if (lci < data.size() && higherP(max, lci)) {
			max = lci;
			swap(max, lci);
		}
		if (rci < data.size() && higherP(max, rci)) {
			max = rci;
			swap(max, rci);
		}
		if (max != pi) {
			downheapify(max);
		}
	}

	private void swap(int i, int j) {
		int ith = data.get(i);
		int jth = data.get(j);

		data.set(i, jth);
		data.set(j, ith);
	}

	private boolean higherP(int i, int j) {
		int ith = data.get(i);
		int jth = data.get(j);
		if (ismin) {
			if (ith < jth) {
				return true;
			} else {
				return false;
			}
		} else {
			if (ith > jth) {
				return false;
			} else {
				return true;
			}
		}
	}
}
