package binaryTree;

import java.util.LinkedList;
import java.util.Scanner;

public class BinaryTree {
	private class Node {
		int data;
		Node left;
		Node right;
	}

	Node root;
	int size;

	public BinaryTree() {
		Scanner scn = new Scanner(System.in);
		root = takeinput(root, false, scn);
	}

	private Node takeinput(Node parent, boolean ilc, Scanner scn) {
		if (parent == null) {
			System.out.println("ENTER THE ROOT");
		} else {
			if (ilc) {
				System.out.println("ENTER " + parent.data + "'s LEFT CHILD ");
			} else {
				System.out.println("ENTER " + parent.data + "'s RIGHT CHILD ");
			}
		}
		int data = scn.nextInt();
		size++;
		Node child = new Node();
		child.data = data;
		System.out.println("DOES " + child.data + " IT HAVE LEFT CHILD");
		boolean hlc = scn.nextBoolean();
		if (hlc) {
			child.left = takeinput(child, true, scn);
		}
		System.out.println("DOES " + child.data + " IT HAVE RIGHT CHILD");
		boolean hrc = scn.nextBoolean();
		if (hrc) {
			child.right = takeinput(child, false, scn);
		}
		return child;
	}

	public void display() {
		display(root);
	}

	private void display(Node node) {
		if (node == null) {
			return;
		}
		String str = "";
		if (node.left != null) {
			str += node.left.data;
		} else {
			str += ".";
		}
		str += " => " + node.data + " <= ";
		if (node.right != null) {
			str += node.right.data;
		} else {
			str += ".";
		}
		System.out.println(str);
		display(node.left);
		display(node.right);
	}

	public int size() {
		return size;
	}

	public boolean IsEmpty() {
		if (size == 0) {
			return true;
		}
		return false;
	}

	public int size2() {
		return size2(root);
	}

	private int size2(Node node) {
		if (node == null) {
			return 0;
		}
		int ls = size2(node.left);
		int rs = size2(node.right);
		return ls + rs + 1;
	}

	public int height() {
		return height(root, 0, 0);

	}

	private int height(Node node, int d, int h) {
		if (node == null) {
			return h;
		}
		if (d > h) {
			h = d;
		}
		h = Math.max(height(node.right, d + 1, h), height(node.left, d + 1, h));
		return h;
	}

	public int max() {
		int h = Integer.MIN_VALUE;
		return max(root, h);
	}

	private int max(Node node, int max) {
		if (node == null) {
			return max;
		}
		if (max < node.data) {
			max = node.data;
		}
		int max1 = max(node.left, max);
		int max2 = max(node.right, max);
		max = Math.max(max1, max2);
		return max;
	}

	public boolean find(int data) {
		return find(root, data, false);
	}

	private boolean find(Node node, int data, boolean ans) {
		if (node == null) {
			return false;
		}
		if (node.data == data) {
			return true;
		}
		if (ans != true) {
			ans = find(node.left, data, ans);
		}
		if (ans != true) {
			ans = find(node.right, data, ans);
		}
		return ans;
	}

	public int diameter() {
		// return diameterStupid(root);
		return diameter2(root).diameter;
	}

	private class DiaPair {
		int height;
		int diameter;
	}

	private int diameterStupid(Node node) {
		if (node == null) {
			return 0;
		}
		int ld = diameterStupid(node.left);
		int rd = diameterStupid(node.right);
		int h1 = height(node.left, 0, 0);
		int h2 = height(node.right, 0, 0);

		return Math.max(h1 + h2 + 2, Math.max(ld, rd));
	}

	private DiaPair diameter2(Node node) {
		if (node == null) {
			DiaPair bc = new DiaPair();
			bc.height = -1;
			bc.diameter = 0;
			return bc;
		}
		DiaPair lc = diameter2(node.left);
		DiaPair rc = diameter2(node.right);
		DiaPair ans = new DiaPair();
		ans.height = Math.max(lc.height, rc.height) + 1;
		ans.diameter = Math.max(lc.height + rc.height + 2, Math.max(lc.diameter, rc.diameter));
		return ans;
	}

	private class bal {
		int height;
		boolean ans;
	}

	public boolean IsBalanced() {
		return isbalanced(root).ans;
	}

	private bal isbalanced(Node node) {
		if (node == null) {
			bal bs = new bal();
			bs.height = -1;
			bs.ans = false;
			return bs;
		}
		bal ls = isbalanced(node.left);
		bal rs = isbalanced(node.right);
		bal ans = new bal();
		ans.height = Math.max(ls.height, rs.height) + 1;
		if (ls.ans && rs.ans) {
			int gap = Math.abs(ls.height - rs.height);
			if (gap <= 1) {
				ans.ans = true;
			} else {
				ans.ans = false;
			}
		} else {
			ans.ans = false;
		}
		return ans;
	}

	private class bst {
		int min;
		int max;
		boolean ans;
		Node node = null;
		int size = 0;
	}

	public boolean IsBST() {
		return isbst(root).ans;
	}

	private bst isbst(Node node) {
		if (node == null) {
			bst bc = new bst();
			bc.min = Integer.MAX_VALUE;
			bc.max = Integer.MIN_VALUE;
			bc.ans = true;
			return bc;
		}
		bst ls = isbst(node.left);
		bst rs = isbst(node.right);
		bst res = new bst();
		res.max = Math.max(node.data, Math.max(ls.max, rs.max));
		res.min = Math.min(node.data, Math.min(ls.min, rs.min));
		if (ls.ans && rs.ans) {
			if (node.data > ls.max && node.data < rs.min) {
				res.ans = true;
			} else {
				res.ans = false;
			}
		} else {
			res.ans = false;
		}
		return res;
	}

	public void preorderIself() {
		preorderIself(root, root.left, root.right);
	}

	private void preorderIself(Node n, Node l, Node r) {
		Node node = n;
		Node left = l;
		Node right = r;
		System.out.print(node.data + "\t");
		while (left != null) {

			System.out.print(left.data + "\t");
			node = left;
			left = left.left;
			if (left.right == null) {
				System.out.print(right.data + "\t");
			} else {
				right = left.right;
			}
		}
		while (right != null) {
			System.out.print(right.left.data + "\t");
			node = right;
			left = right.left;
			if (left.right == null) {
				System.out.print(right.data + "\t");
			} else {
				right = right.right;
			}
		}
		node = n;
		left = l;
		right = r;
		// while (right != null) {
		// System.out.print(node.data + "\t");
		// System.out.print(right.data + "\t");
		// node = right;
		// if (right.left == null) {
		// System.out.print(left.data);
		// } else {
		// left=right.left;
		// }
		// right = right.right;
		// }
		// while(left!=null){
		// System.out.print(left.left.data+"\t");
		// node=right.left;
		// right=right.left;
		// if (left.right == null) {
		// System.out.print(right.data + "\t");
		// } else {
		// right = right.right;
		// }
		// }
	}

	private class marker {
		Node node;
		boolean self, left, right;
	}

	public void preorderI() {
		marker m = new marker();
		m.node = root;
		LinkedList<marker> stack = new LinkedList<>();
		stack.addFirst(m);
		while (stack.size() != 0) {
			m = stack.getFirst();
			if (m.self == false) {
				System.out.print(m.node.data + "\t");
				m.self = true;
			} else if (m.left == false) {
				if (m.node.left != null) {
					marker lp = new marker();
					lp.node = m.node.left;
					stack.addFirst(lp);
				}
				m.left = true;
			} else if (m.right == false) {
				if (m.node.right != null) {
					marker rp = new marker();
					rp.node = m.node.right;
					stack.add(rp);
				}
				m.right = true;
			} else if (m.left == true && m.right == true && m.self == true) {
				stack.removeFirst();
			}
		}
	}

	public void InorderI() {
		marker m = new marker();
		m.node = root;
		LinkedList<marker> stack = new LinkedList<>();
		stack.addFirst(m);
		while (stack.size() != 0) {
			m = stack.getFirst();
			if (m.left == false) {
				if (m.node.left != null) {
					marker lp = new marker();
					lp.node = m.node.left;
					stack.addFirst(lp);
				}
				m.left = true;
			} else if (m.self == false) {
				System.out.print(m.node.data + "\t");
				m.self = true;
			} else if (m.right == false) {
				if (m.node.right != null) {
					marker rp = new marker();
					rp.node = m.node.right;
					stack.add(rp);
				}
				m.right = true;
			} else if (m.left == true && m.right == true && m.self == true) {
				stack.removeFirst();
			}
		}
	}

	public void LevelOrder() {
		LinkedList<Node> queue = new LinkedList<>();
		queue.add(root);
		while (queue.size() != 0) {

		}
	}

	public BinaryTree(int[] post, int[] in, int[] pre) {
		// root=construct(pre, in, 0, pre.length-1, 0, in.length-1);
		root = construct1(post, in, 0, post.length - 1, 0, in.length - 1);
	}

	private Node construct(int[] pre, int[] in, int psi, int pei, int isi, int iei) {
		if (psi > pei || isi > iei) {
			return null;
		}
		Node node = new Node();
		node.data = pre[psi];
		this.size++;
		int idx = -1;
		for (int i = isi; i <= iei; i++) {
			if (in[i] == node.data) {
				idx = i;
				break;
			}
		}
		int clse = idx - isi;
		node.left = construct(pre, in, psi + 1, psi + clse, isi, idx - 1);
		node.right = construct(pre, in, psi + clse + 1, pei, idx + 1, iei);
		return node;
	}

	private Node construct1(int[] post, int[] in, int posi, int poei, int insi, int inei) {
		if (poei < posi || inei < insi) {
			return null;
		}
		Node node = new Node();
		node.data = post[poei];
		size++;
		int idx = -1;
		for (int i = insi; i <= inei; i++) {
			if (in[i] == node.data) {
				idx = i;
				break;
			}
		}
		int clse = idx - insi;
		node.left = construct1(post, in, posi, posi + clse - 1, insi, idx - 1);
		node.right = construct1(post, in, posi + clse, poei - 1, idx + 1, inei);
		return node;
	}

	public void printwithsib() {
		System.out.print(root.data + "\t");
		pws(root, null);
	}

	private void pws(Node curr, Node prev) {
		if (curr == null) {
			return;
		}
		pws(curr.left, curr);
		pws(curr.right, curr);
		if (prev != null) {
			if (prev.left == null || prev.right == null) {
				System.out.print(curr.data + "\t");
			}
		}
	}

	public void removeleaves() {
		removeleaves(root, null, true);
	}

	private void removeleaves(Node curr, Node prev, boolean ilc) {
		if (curr == null) {
			return;
		}
		if (curr.left == null && curr.right == null) {
			if (ilc) {
				prev.left = null;
			} else {
				prev.right = null;
			}
		}
		removeleaves(curr.left, curr, true);
		removeleaves(curr.right, curr, false);
		return;
	}

	public void findBST() {
		System.out.println(findbst(root).node.data);
		System.out.println(findbst(root).size);
	}

	private bst findbst(Node node) {
		if (node == null) {
			bst bc = new bst();
			bc.min = Integer.MAX_VALUE;
			bc.max = Integer.MIN_VALUE;
			bc.ans = true;
			return bc;
		}
		bst ls = findbst(node.left);
		bst rs = findbst(node.right);
		bst res = new bst();
		res.max = Math.max(node.data, Math.max(ls.max, rs.max));
		res.min = Math.min(node.data, Math.min(ls.min, rs.min));
		if (ls.ans && rs.ans) {
			if (node.data > ls.max && node.data < rs.min) {
				res.ans = true;
			} else {
				res.ans = false;
			}
		} else {
			res.ans = false;
		}
		if (res.ans) {
			res.node = node;
			res.size = ls.size + rs.size + 1;
		} else {
			if (ls.size > rs.size) {
				res.node = ls.node;
				res.size = ls.size;
			} else {
				res.node = rs.node;
				res.size = rs.size;
			}
		}
		return res;
	}

}
